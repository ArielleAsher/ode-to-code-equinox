# Import necessary libraries
import hashlib

# Define a dictionary to store user credentials
users = {}

# Define a function to register a new user
def register():
    username = input("Enter a username: ")
    password = input("Enter a password: ")
    # Hash the password for security
    hashed_password = hashlib.sha256(password.encode()).hexdigest()
    # Add the user credentials to the users dictionary
    users[username] = hashed_password
    print("Registration successful!")

# Define a function to log in an existing user
def login():
    username = input("Enter your username: ")
    password = input("Enter your password: ")
    # Hash the password for comparison with stored value
    hashed_password = hashlib.sha256(password.encode()).hexdigest()
    # Check if the username and password match a user in the users dictionary
    if username in users and users[username] == hashed_password:
        print("Login successful!")
    else:
        print("Invalid username or password.")

# Main program loop
while True:
    print("Enter 1 to register a new account")
    print("Enter 2 to log in to an existing account")
    print("Enter 3 to exit")
    choice = input("Enter your choice: ")
    if choice == "1":
        register()
    elif choice == "2":
        login()
    elif choice == "3":
        break
    else:
        print("Invalid choice. Try again.")
        
        
        class User:
    def __init__(self, name, roles):
        self.name = name
        self.roles = roles

class Role:
    def __init__(self, name, permissions):
        self.name = name
        self.permissions = permissions

class Permission:
    def __init__(self, name):
        self.name = name

class System:
    def __init__(self, permissions):
        self.permissions = permissions

    def is_authorized(self, user, permission_name):
        for role in user.roles:
            if self.permissions.get(role.name) is not None:
                permissions = self.permissions[role.name]
                for permission in permissions:
                    if permission.name == permission_name:
                        return True
        return False

# Define permissions for different roles
admin_permissions = [Permission("can_edit_users"), Permission("can_delete_users"), Permission("can_create_projects")]
manager_permissions = [Permission("can_create_projects"), Permission("can_edit_projects")]
user_permissions = [Permission("can_view_projects")]

# Define roles with their respective permissions
admin_role = Role("admin", admin_permissions)
manager_role = Role("manager", manager_permissions)
user_role = Role("user", user_permissions)

# Define users with their assigned roles
user1 = User("John", [admin_role])
user2 = User("Jane", [manager_role])
user3 = User("Bob", [user_role])

# Define the system and assign permissions to different roles
system_permissions = {
    "admin": admin_permissions,
    "manager": manager_permissions,
    "user": user_permissions
}
system = System(system_permissions)

# Example usage
if system.is_authorized(user1, "can_edit_users"):
    print("User can edit users.")
else:
    print("User cannot edit users.")

if system.is_authorized(user2, "can_create_projects"):
    print("User can create projects.")
else:
    print("User cannot create projects.")


